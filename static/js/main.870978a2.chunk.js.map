{"version":3,"sources":["data/index.js","api/index.js","App.js","serviceWorker.js","index.js"],"names":["getGeosonData","response","data","Array","isArray","length","type","features","map","values","lat","lng","long","properties","geometry","coordinates","fetchData","a","country","url","axios","get","console","log","message","geodata","Option","Select","Map","ReactMapboxGl","accessToken","App","useState","setgeodata","method","color","selectedMethod","setMethod","circlePaint","getdata","args","useEffect","className","style","containerStyle","height","width","center","zoom","circleLayout","visibility","circleOnClick","evt","symbolLayout","symbolPaint","defaultValue","onChange","val","newState","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"qUAAaA,EAAgB,SAACC,GAAc,IAAD,EACjBA,EAAdC,YAD+B,MACxB,GADwB,EAIvC,GAFgBC,MAAMC,QAAQF,IAASA,EAAKG,OAAS,EAqBrD,MAjBgB,CACZC,KAAM,oBACNC,SAAUL,EAAKM,KAAI,WAAkB,IAAjBC,EAAgB,uDAAP,GACjBC,EAAmBD,EAAnBC,IAAWC,EAAQF,EAAdG,KACb,MAAO,CACHN,KAAM,UACNO,WAAW,eACJJ,GAEPK,SAAU,CACNR,KAAM,QACNS,YAAa,CAAEJ,EAAKD,UCZ3BM,EAAS,uCAAG,gDAAAC,EAAA,6DAAOX,EAAP,+BAAc,YAAaY,EAA3B,+BAAqC,MAExDC,EAFmB,mDAE+BD,EAF/B,YAE0CZ,GAF1C,kBAIJc,IAAMC,IAAIF,GAJN,OAIrBlB,EAJqB,OAKrBqB,QAAQC,IAAI,WAAYtB,GALH,yDAOrBqB,QAAQC,IAAR,qCAA0C,KAAEC,SAA5C,MAPqB,kCAWjBC,EAAUzB,EAAcC,GAXP,kBAYhBwB,GAZgB,0DAAH,qD,SCEdC,EAAWC,IAAXD,OAEFE,EAAMC,YAAc,CACxBC,YACE,iGAoHWC,MAhHf,WAAgB,IAAD,EACiBC,mBAAS,MAD1B,mBACNP,EADM,KACGQ,EADH,OAEuBD,mBAAS,CAC3CE,OAAQ,YACRC,MAAO,WAJI,mBAENC,EAFM,KAEUC,EAFV,KAkBPC,EAAoC,CACxC,gBAAiB,CAAC,QAAS,CAAC,OAAQ,CAAC,IAAK,EAAG,CAAC,SAAU,CAAC,MAAOF,EAAeF,QAAS,MACxF,eAAgBE,EAAeD,MAC/B,iBAAkB,GAClB,sBAAuB,EACvB,sBAAuB,QAvBZ,SA0BEI,IA1BF,2EA0Bb,gDAAAtB,EAAA,qEAA0BuB,EAA1B,yBAA0BA,EAA1B,eACE,EAAAlB,SAAQC,IAAR,SAAY,QAAZ,OAAuBiB,IADzB,SAEqBxB,EAAS,WAAT,EAAawB,GAFlC,QAEQtC,EAFR,SAII+B,EAAW/B,GAJf,4CA1Ba,sBA8Eb,OA5CAuC,qBAAU,WACRF,MAEC,IAEHjB,QAAQC,IAAI,UAAWE,GAwCrB,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACd,EAAD,CACEe,MAAQ,sDACRC,eAAkB,CAChBC,OAAQ,QACRC,MAAO,SAETC,OAAU,EAAE,WAAY,WACxBC,KAAQ,CAAC,QAET,kBAAC,IAAD,CACE9C,KAAMuB,EACNwB,aA3EkC,CAAEC,WAAY,WA4EhDZ,YAAaA,EACba,cArDY,SAACC,GACrB9B,QAAQC,IAAI6B,IAqDJC,aAxFkC,CAC1C,aAAc,UACd,YAAa,CAAC,qBAAsB,yBACpC,cAAe,CAAC,EAAG,IACnB,cAAe,OAqFPC,YAnFgC,CACxC,aAAc,YAuFV,kBAAC,IAAD,CAAQC,aAAa,YAAYb,UAAU,aAAaC,MAAO,CAAEG,MAAO,KAAOU,SAxDhE,SAACC,GACpBnC,QAAQC,IAAIkC,GACZ,IAAIC,EAAW,GAEJ,WAARD,EACDC,EAAW,CACTxB,OAAQuB,EACRtB,MAAO,UAGK,WAARsB,EACNC,EAAW,CACTxB,OAAQuB,EACRtB,MAAO,OAGK,cAARsB,GACNlB,EAAQkB,GACRC,EAAW,CACTxB,OAAQuB,EACRtB,MAAO,UAITuB,EAAW,CACTxB,OAAQuB,EACRtB,MAAO,UAIXE,EAAUqB,KA2BJ,kBAAChC,EAAD,CAAQiC,MAAM,aAAd,eACA,kBAACjC,EAAD,CAAQiC,MAAM,UAAd,gBACA,kBAACjC,EAAD,CAAQiC,MAAM,UAAd,cC3GUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMrD,c","file":"static/js/main.870978a2.chunk.js","sourcesContent":["export const getGeosonData = (response) => {\n    const { data = [] } = response;\n    const hasData = Array.isArray(data) && data.length > 0;\n\n    if ( !hasData ) return;\n\n    const geoJson = {\n        type: 'FeatureCollection',\n        features: data.map((values = {}) => {\n            const { lat, long: lng } = values;\n            return {\n                type: 'Feature',\n                properties: {\n                    ...values,\n                },\n                geometry: {\n                    type: 'Point',\n                    coordinates: [ lng, lat ]\n                }\n            }\n        })\n    }\n\n    return geoJson;\n}","import axios from 'axios';\nimport { getGeosonData } from '../data';\n\n// url = 'https://corona.lmao.ninja/countries';\n\nexport const fetchData = async (type = 'confirmed', country = 'USA') => {\n  let response;\n  let url = `https://covid19.mathdro.id/api/countries/${country}/${type}`;\n  try {\n    response = await axios.get(url);\n    console.log('response', response);\n  } catch(e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e);\n    return;\n  }\n\n  const geodata = getGeosonData(response);\n  return geodata;\n}\n\nexport const fetchDataStatewise = async () => {\n  let response;\n\n  try {\n    response = await axios.get('https://corona.lmao.ninja/v2/states?sort=cases');\n    console.log('statewise response', response);\n  } catch(e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e);\n    return;\n  }\n\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ReactMapboxGl, { GeoJSONLayer } from 'react-mapbox-gl';\nimport * as MapboxGL from 'mapbox-gl';\nimport { fetchData } from './api';\nimport {  Select } from 'antd';\n\nconst { Option } = Select;\n\nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1IjoiYmlrYXNoNjM3IiwiYSI6ImNrOHhvdWV2ZjE5c2gzZm1odWw4dTRnNW4ifQ.dciD6bok1ANU-Ht0Ingjwg'\n    \n});\n\nfunction App() {\n  const [geodata, setgeodata] = useState(null);\n  const [selectedMethod, setMethod] = useState({\n    method: 'confirmed',\n    color: 'yellow'\n  });\n\n  const symbolLayout: MapboxGL.SymbolLayout = {\n    'text-field': '{place}',\n    'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n    'text-offset': [0, 0.6],\n    'text-anchor': 'top'\n  };\n  const symbolPaint: MapboxGL.SymbolPaint = {\n    'text-color': 'white'\n  };\n  \n  const circleLayout: MapboxGL.CircleLayout = { visibility: 'visible' };\n  const circlePaint: MapboxGL.CirclePaint = {\n    'circle-radius': ['round', ['log2', ['+', 1, ['number', ['get', selectedMethod.method], 0]]]],\n    'circle-color': selectedMethod.color,\n    'circle-opacity': 0.8,\n    'circle-stroke-width': 1,\n    'circle-stroke-color': '#333',\n  };\n\n  async function getdata(...args) {\n    console.log('args', ...args);\n    const data = await fetchData(...args);\n    if(data){ \n      setgeodata(data);\n    }\n  }\n\n  useEffect(() => { \n    getdata();\n    \n  }, []);\n\n  console.log('geodata', geodata);\n\n  const onClickCircle = (evt) => {\n    console.log(evt);\n  };\n  \n  const handleChange = (val) => {\n    console.log(val);\n    let newState = {};\n\n    if(val === 'active') {\n      newState = {\n        method: val,\n        color: 'orange'\n      }\n    }\n    else if(val === 'deaths') {\n      newState = {\n        method: val,\n        color: 'red'\n      }\n    }\n    else if(val === 'recovered') {\n      getdata(val);\n      newState = {\n        method: val,\n        color: 'green'\n      }\n    }\n    else {\n      newState = {\n        method: val,\n        color: 'yellow'\n      }\n    }\n\n    setMethod(newState);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Map\n          style = \"mapbox://styles/bikash637/ck9066nwq12ak1ip5vng79u15\"\n          containerStyle = {{\n            height: '100vh',\n            width: '100vw'\n          }}\n          center = {[-102.845452, 40.149178]}\n          zoom = {['3.7']}\n        >\n          <GeoJSONLayer\n            data={geodata}\n            circleLayout={circleLayout}\n            circlePaint={circlePaint}\n            circleOnClick={onClickCircle}\n            symbolLayout={symbolLayout}\n            symbolPaint={symbolPaint}\n          />\n\n        </Map>\n\n        <Select defaultValue=\"confirmed\" className=\"select-btn\" style={{ width: 120 }} onChange={handleChange}>\n          <Option value=\"confirmed\">Total Cases</Option>\n          <Option value=\"active\">Active Cases</Option>\n          <Option value=\"deaths\">Deaths</Option>\n          {/* <Option value=\"recovered\">Recovered</Option> */}\n        </Select>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}