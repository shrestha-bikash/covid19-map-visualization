{"version":3,"sources":["data/index.js","api/index.js","App.js","serviceWorker.js","index.js"],"names":["getGeosonData","response","data","Array","isArray","length","type","features","map","values","lat","lng","long","properties","geometry","coordinates","fetchCountriesList","a","axios","get","console","log","message","fetchCountOnly","country","url","count","confirmed","value","deaths","recovered","fetchData","geodata","Option","Select","Map","ReactMapboxGl","accessToken","App","useState","stat","setStat","countries","setCountry","setgeodata","method","color","selectedMethod","setMethod","clickedValue","setValue","center","zoom","viewport","setViewport","circlePaint","getdata","getStat","useEffect","getCountries","className","style","containerStyle","height","width","onZoomEnd","e","getZoom","getCenter","circleLayout","visibility","circleOnClick","preventDefault","regionName","combinedKey","targetValue","lngLat","region","symbolLayout","symbolPaint","onClick","toUpperCase","showSearch","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","defaultValue","onChange","val","item","key","name","newState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a994d589.chunk.js","sourcesContent":["export const getGeosonData = (response) => {\n    const { data = [] } = response;\n    const hasData = Array.isArray(data) && data.length > 0;\n\n    if ( !hasData ) return;\n\n    const geoJson = {\n        type: 'FeatureCollection',\n        features: data.map((values = {}) => {\n            const { lat, long: lng } = values;\n            return {\n                type: 'Feature',\n                properties: {\n                    ...values,\n                },\n                geometry: {\n                    type: 'Point',\n                    coordinates: [ lng, lat ]\n                }\n            }\n        })\n    }\n\n    return geoJson;\n}","import axios from 'axios';\nimport { getGeosonData } from '../data';\n\n// url = 'https://corona.lmao.ninja/countries';\n\nexport const fetchCountriesList = async () => {\n  let response;\n  let url = `https://covid19.mathdro.id/api/countries/`;\n  try {\n    response = await axios.get(url);\n  } catch(e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e);\n    return;\n  }\n  const { data = {} } = response;\n  return data;\n}\n\nexport const fetchCountOnly = async (country = 'USA') => {\n  let response;\n  let url = `https://covid19.mathdro.id/api/countries/${country}`;\n  try {\n    response = await axios.get(url);\n  } catch(e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e);\n    return;\n  }\n\n  const { data = {} } = response;\n  const count = {\n    confirmed: data.confirmed.value,\n    deaths: data.deaths.value,\n    recovered: data.recovered.value\n  }\n\n  return count;\n}\n\nexport const fetchData = async (country = 'USA', type = 'confirmed') => {\n  let response;\n  let url = `https://covid19.mathdro.id/api/countries/${country}/${type}`;\n  try {\n    response = await axios.get(url);\n    // console.log('response', response);\n  } catch(e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e);\n    return;\n  }\n\n  const geodata = getGeosonData(response);\n  return geodata;\n}\n\nexport const fetchDataStatewise = async () => {\n  let response;\n\n  try {\n    response = await axios.get('https://corona.lmao.ninja/v2/states?sort=cases');\n    console.log('statewise response', response);\n  } catch(e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e);\n    return;\n  }\n\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ReactMapboxGl, { GeoJSONLayer, Popup } from 'react-mapbox-gl';\nimport * as MapboxGL from 'mapbox-gl';\nimport { fetchData, fetchCountOnly, fetchCountriesList } from './api';\nimport {  Select, Tag } from 'antd';\n\nconst { Option } = Select;\n\nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1IjoiYmlrYXNoNjM3IiwiYSI6ImNrOHhvdWV2ZjE5c2gzZm1odWw4dTRnNW4ifQ.dciD6bok1ANU-Ht0Ingjwg'\n    \n});\n\nfunction App() {\n  const [stat, setStat] = useState(null);\n  const [countries, setCountry] = useState(null);\n  const [geodata, setgeodata] = useState(null);\n  const [selectedMethod, setMethod] = useState({\n    method: 'confirmed',\n    color: 'yellow'\n  });\n  const [clickedValue, setValue] = useState(null);\n  let [viewport, setViewport] = useState({\n    center: [-102.845452, 40.149178],       \n    zoom: ['3.7']\n  });\n\n  const symbolLayout: MapboxGL.SymbolLayout = {\n    'text-field': '{place}',\n    'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n    'text-offset': [0, 0.6],\n    'text-anchor': 'top'\n  };\n  const symbolPaint: MapboxGL.SymbolPaint = {\n    'text-color': 'white'\n  };\n  \n  const circleLayout: MapboxGL.CircleLayout = { visibility: 'visible' };\n  const circlePaint: MapboxGL.CirclePaint = {\n    'circle-radius': ['round', ['log2', ['+', 1, ['number', ['get', selectedMethod.method], 0]]]],\n    'circle-color': selectedMethod.color,\n    'circle-opacity': 0.8,\n    'circle-stroke-width': 1,\n    'circle-stroke-color': '#333',\n  };\n\n  async function getCountries() {\n    const data = await fetchCountriesList();\n    if(data){\n      const { countries = [] } = data;\n      // console.log('countries', countries);\n      setCountry(countries);\n    }\n  }\n\n  async function getdata(...args) {\n    let country = args[0];\n    getStat(country);\n    const data = await fetchData(...args);\n    if(data){ \n      // console.log('data', data.features);\n      if(data.features.length > 0 && country !== 'US') {\n          setViewport({\n            zoom: ['4'],\n            center: data.features[0].geometry.coordinates\n          })\n      }\n      else {\n        setViewport({\n          center: [-102.845452, 40.149178],       \n            zoom: ['3.7']\n        });\n      }\n      setgeodata(data);\n    }\n  }\n\n  async function getStat(country) {\n    const data = await fetchCountOnly(country);\n    // console.log('data', data);\n    setStat(data);\n  }\n\n  useEffect(() => { \n    getCountries();\n    getdata('US');\n    \n  }, []);\n\n\n  const onClickCircle = (e) => {\n    e.preventDefault();\n\n    let regionName = e.features[0].properties.combinedKey;\n    let value = e.features[0].properties[selectedMethod.method];\n    // console.log(regionName, value);\n\n    let targetValue = {\n      lng: e.lngLat.lng,\n      lat: e.lngLat.lat,\n      region: regionName,\n      count: value\n    }\n    setValue(targetValue);\n  };\n  \n  const handleChange = (val) => {\n    // console.log(val);\n    setValue(null);\n    let newState = {};\n\n    if(val === 'active') {\n      newState = {\n        method: val,\n        color: 'orange'\n      }\n    }\n    else if(val === 'deaths') {\n      newState = {\n        method: val,\n        color: 'red'\n      }\n    }\n    else if(val === 'recovered') {\n      getdata(val);\n      newState = {\n        method: val,\n        color: 'green'\n      }\n    }\n    else {\n      newState = {\n        method: val,\n        color: 'yellow'\n      }\n    }\n\n    setMethod(newState);\n  }\n\n  const handleCountryChange = (val) => {\n    getdata(val);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Map\n          style = \"mapbox://styles/bikash637/ck9066nwq12ak1ip5vng79u15\"\n          containerStyle = {{\n            height: '100vh',\n            width: '100vw'\n          }}\n          {...viewport}\n          onZoomEnd={e => {\n            setViewport({\n              zoom: [e.getZoom()],\n              center: [e.getCenter().lng, e.getCenter().lat]\n            })\n          }}\n        >\n          <GeoJSONLayer\n            data={geodata}\n            circleLayout={circleLayout}\n            circlePaint={circlePaint}\n            circleOnClick={onClickCircle}\n            symbolLayout={symbolLayout}\n            symbolPaint={symbolPaint}\n          />\n          {\n            clickedValue ? (\n              <Popup\n                coordinates={[clickedValue.lng, clickedValue.lat]}\n                onClick={() => {\n                  setValue(null);\n                }}\n              >\n                <div>\n                  <h3>{clickedValue.region}</h3>\n                  <h4>{selectedMethod.method.toUpperCase()}: {clickedValue.count}</h4>\n                </div>\n              </Popup>\n            ) : null\n          }\n\n        </Map>\n        \n        <div className=\"select-btn\">\n        <Select\n          showSearch\n          optionFilterProp=\"children\"\n          filterOption={(input, option) =>\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n          defaultValue=\"US\" \n          style={{ width: 140 }} \n          onChange={handleCountryChange}\n          >\n            {\n              countries && countries.length > 0 ? countries.map((item) => \n                <Option key={item.name} value={item.name}>{item.name}</Option>\n              ) : null\n            }\n          </Select>\n          <Select defaultValue=\"confirmed\" style={{ width: 120 }} onChange={handleChange}>\n            <Option value=\"confirmed\">Total Cases</Option>\n            <Option value=\"active\">Active Cases</Option>\n            <Option value=\"deaths\">Deaths</Option>\n            {/* <Option value=\"recovered\">Recovered</Option> */}\n          </Select>\n        </div>\n        \n\n        \n        {\n          stat ? (\n            <div className='custom-tag'>\n              <Tag color=\"gold\">\n                <p>Confirmed</p>\n                {stat.confirmed}\n              </Tag>\n              <Tag color=\"red\">\n                <p>Deaths</p>\n                {stat.deaths}\n                </Tag>\n              <Tag color=\"green\">\n                <p>Recovered</p>\n                {stat.recovered}\n                </Tag>\n            </div>\n          ) : null\n        }\n        \n        \n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}