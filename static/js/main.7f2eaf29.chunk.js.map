{"version":3,"sources":["data/index.js","api/index.js","App.js","serviceWorker.js","index.js"],"names":["getGeosonData","response","data","Array","isArray","length","type","features","map","country","lat","lng","long","properties","geometry","coordinates","fetchData","a","axios","get","console","log","message","geodata","Map","ReactMapboxGl","accessToken","symbolLayout","symbolPaint","circleLayout","visibility","circlePaint","App","useState","setgeodata","useEffect","getdata","className","style","containerStyle","height","width","center","zoom","circleOnClick","e","evt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"0TAAaA,EAAgB,SAACC,GAAc,IAAD,EACjBA,EAAdC,YAD+B,MACxB,GADwB,EAIvC,GAFgBC,MAAMC,QAAQF,IAASA,EAAKG,OAAS,EAqBrD,MAjBgB,CACZC,KAAM,oBACNC,SAAUL,EAAKM,KAAI,WAAmB,IAAlBC,EAAiB,uDAAP,GAClBC,EAAmBD,EAAnBC,IAAWC,EAAQF,EAAdG,KACb,MAAO,CACHN,KAAM,UACNO,WAAW,eACJJ,GAEPK,SAAU,CACNR,KAAM,QACNS,YAAa,CAAEJ,EAAKD,UCX3BM,EAAS,uCAAG,WAAOP,GAAP,iBAAAQ,EAAA,+EAIJC,IAAMC,IANf,0DAEa,OAIrBlB,EAJqB,OAKrBmB,QAAQC,IAAI,WAAYpB,GALH,uDAOrBmB,QAAQC,IAAR,qCAA0C,KAAEC,SAA5C,MAPqB,kCAWjBC,EAAUvB,EAAcC,GAXP,kBAYhBsB,GAZgB,yDAAH,sDCChBC,EAAMC,YAAc,CACxBC,YACE,iGAIEC,EAAsC,CAC1C,aAAc,UACd,YAAa,CAAC,qBAAsB,yBACpC,cAAe,CAAC,EAAG,IACnB,cAAe,OAEXC,EAAoC,CACxC,aAAc,SAGVC,EAAsC,CAAEC,WAAY,WACpDC,EAAoC,CACxC,gBAAiB,CAAC,QAAS,CAAC,OAAQ,CAAC,IAAK,EAAG,CAAC,SAAU,CAAC,MAAO,UAAW,MAC3E,eAAgB,MAChB,iBAAkB,GAClB,sBAAuB,EACvB,sBAAuB,QA+DVC,MAxDf,WAAgB,IAAD,EACiBC,mBAAS,MAD1B,mBACNV,EADM,KACGW,EADH,KAkBb,OAfAC,qBAAU,WAAM,4CACd,4BAAAlB,EAAA,sEACqBD,IADrB,QACQd,EADR,SAKIgC,EAAWhC,GALf,4CADc,uBAAC,WAAD,wBASdkC,KAEC,IAEHhB,QAAQC,IAAI,UAAWE,GAGrB,yBAAKc,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACb,EAAD,CACEc,MAAQ,sDACRC,eAAkB,CAChBC,OAAQ,QACRC,MAAO,SAETC,OAAU,EAAE,SAAU,YACtBC,KAAQ,CAAC,QAET,kBAAC,IAAD,CACEzC,KAAMqB,EACNM,aAAcA,EACdE,YAAaA,EACba,cAAe,SAACC,GAAD,OAtCJC,EAsCyBD,OArC9CzB,QAAQC,IAAIyB,GADQ,IAACA,GAuCXnB,aAAcA,EACdC,YAAaA,QC5DLmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAM1C,c","file":"static/js/main.7f2eaf29.chunk.js","sourcesContent":["export const getGeosonData = (response) => {\n    const { data = [] } = response;\n    const hasData = Array.isArray(data) && data.length > 0;\n\n    if ( !hasData ) return;\n\n    const geoJson = {\n        type: 'FeatureCollection',\n        features: data.map((country = {}) => {\n            const { lat, long: lng } = country;\n            return {\n                type: 'Feature',\n                properties: {\n                    ...country,\n                },\n                geometry: {\n                    type: 'Point',\n                    coordinates: [ lng, lat ]\n                }\n            }\n        })\n    }\n\n    return geoJson;\n}","import axios from 'axios';\nimport { getGeosonData } from '../data';\n\n// url = 'https://corona.lmao.ninja/countries';\nconst url = \"https://covid19.mathdro.id/api/countries/USA/confirmed\";\n\nexport const fetchData = async (country) => {\n  let response;\n\n  try {\n    response = await axios.get(url);\n    console.log('response', response);\n  } catch(e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e);\n    return;\n  }\n\n  const geodata = getGeosonData(response);\n  return geodata;\n}\n\nexport const fetchDataStatewise = async () => {\n  let response;\n\n  try {\n    response = await axios.get('https://corona.lmao.ninja/v2/states?sort=cases');\n    console.log('statewise response', response);\n  } catch(e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e);\n    return;\n  }\n\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ReactMapboxGl, { GeoJSONLayer } from 'react-mapbox-gl';\nimport * as MapboxGL from 'mapbox-gl';\nimport { fetchData } from './api';\n\n\nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1IjoiYmlrYXNoNjM3IiwiYSI6ImNrOHhvdWV2ZjE5c2gzZm1odWw4dTRnNW4ifQ.dciD6bok1ANU-Ht0Ingjwg'\n    \n});\n\nconst symbolLayout: MapboxGL.SymbolLayout = {\n  'text-field': '{place}',\n  'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n  'text-offset': [0, 0.6],\n  'text-anchor': 'top'\n};\nconst symbolPaint: MapboxGL.SymbolPaint = {\n  'text-color': 'white'\n};\n\nconst circleLayout: MapboxGL.CircleLayout = { visibility: 'visible' };\nconst circlePaint: MapboxGL.CirclePaint = {\n  'circle-radius': ['round', ['log2', ['+', 1, ['number', ['get', 'deaths'], 0]]]],\n  'circle-color': 'red',\n  'circle-opacity': 0.8,\n  'circle-stroke-width': 1,\n  'circle-stroke-color': '#333',\n};\n\nconst onClickCircle = (evt) => {\n  console.log(evt);\n};\n\nfunction App() {\n  const [geodata, setgeodata] = useState(null);\n\n  useEffect(() => {\n    async function getdata() {\n      const data = await fetchData();\n      // const stateData = fetchDataStatewise();\n      // console.log('in App', data);\n      if(data){ \n        setgeodata(data);\n      }\n    }\n    getdata();\n    \n  }, []);\n\n  console.log('geodata', geodata);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Map\n          style = \"mapbox://styles/bikash637/ck9066nwq12ak1ip5vng79u15\"\n          containerStyle = {{\n            height: '100vh',\n            width: '100vw'\n          }}\n          center = {[-90.30356, 38.6586022]}\n          zoom = {['3.5']}\n        >\n          <GeoJSONLayer\n            data={geodata}\n            circleLayout={circleLayout}\n            circlePaint={circlePaint}\n            circleOnClick={(e) => onClickCircle(e)}\n            symbolLayout={symbolLayout}\n            symbolPaint={symbolPaint}\n          />\n\n          {/* <Layer type=\"symbol\" id=\"marker\" layout={{ 'icon-image': 'marker-15' }}>\n            {\n              geodata && geodata.features.map((feature) =>\n                <Feature \n                  key={feature.properties.country} \n                  coordinates={[feature.geometry.coordinates[0], feature.geometry.coordinates[1]]} \n                />\n              )\n            }\n          </Layer> */}\n        </Map>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}